C51 COMPILER V9.60.0.0   TRAFFIC_LIGHT                                                     12/14/2022 15:30:06 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE TRAFFIC_LIGHT
OBJECT MODULE PLACED IN .\Objects\traffic_light.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE traffic_light.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\List
                    -ings\traffic_light.lst) TABS(2) OBJECT(.\Objects\traffic_light.obj)

line level    source

   1          #include "headfile.h"
   2          
   3          #define DONT_DISPLAY 255 // DisplayDigit函数的val为该值时，两位均不显示
   4          #define SEG_OFF 15       // Write7219向某位数码管写入该值时，该位数码管不显示
   5          
   6          static uchar last_display_val[4];
   7          digs_addr code ONES_BIT[] = {EAST_ONES, SOUTH_ONES, WEST_ONES, NORTH_ONES};
   8          digs_addr code TENS_BIT[] = {EAST_TENS, SOUTH_TENS, WEST_TENS, NORTH_TENS};
   9          uchar remain_time[4];
  10          uchar red_time[4];
  11          uchar yellow_time[4];
  12          uchar green_time[4];
  13          uchar current_color[4];
  14          TrafficLightColor next_status;
  15          
  16          void TrafficLightInit()
  17          {
  18   1          /**
  19   1           * @brief 初始化交通灯的值
  20   1           * @todo 注意修改初始时间
  21   1           */
  22   1          uchar i;
  23   1          for (i = 0; i < TRAFFIC_LIGHT_MAX; i++)
  24   1          {
  25   2              SetLedBit(i, LED_OFF); // 关掉所有灯
  26   2          }
  27   1          // 初始状态
  28   1          red_time[EAST] = 60, yellow_time[EAST] = 5, green_time[EAST] = 15;
  29   1          red_time[SOUTH] = 60, yellow_time[SOUTH] = 5, green_time[SOUTH] = 15;
  30   1          red_time[WEST] = 60, yellow_time[WEST] = 5, green_time[WEST] = 15;
  31   1          red_time[NORTH] = 60, yellow_time[NORTH] = 5, green_time[NORTH] = 15;
  32   1      
  33   1          remain_time[EAST] = 15;
  34   1          remain_time[SOUTH] = 20;
  35   1          remain_time[WEST] = 40;
  36   1          remain_time[NORTH] = 60;
  37   1      
  38   1          SetLedColor(EAST, GREEN);
  39   1          SetLedColor(SOUTH, RED);
  40   1          SetLedColor(WEST, RED);
  41   1          SetLedColor(NORTH, RED);
  42   1      }
  43          
  44          void Write7219(unsigned char address, unsigned char dat)
  45          {
  46   1          unsigned char i;
  47   1          LOAD_7219 = 0; // 拉低片选线，选中器件
  48   1          // 发送地址
  49   1          for (i = 0; i < 8; i++) // 移位循环8次
  50   1          {
  51   2              CLK_7219 = 0;                     // 清零时钟总线
  52   2              DIN_7219 = (bit)(address & 0x80); // 每次取高字节
  53   2              address <<= 1;                    // 左移一位
  54   2              CLK_7219 = 1;                     // 时钟上升沿，发送地址
C51 COMPILER V9.60.0.0   TRAFFIC_LIGHT                                                     12/14/2022 15:30:06 PAGE 2   

  55   2          }
  56   1          // 发送数据
  57   1          for (i = 0; i < 8; i++)
  58   1          {
  59   2              CLK_7219 = 0;
  60   2              DIN_7219 = (bit)(dat & 0x80);
  61   2              dat <<= 1;
  62   2              CLK_7219 = 1; // 时钟上升沿，发送数据
  63   2          }
  64   1          LOAD_7219 = 1; // 发送结束，上升沿锁存数据
  65   1      }
  66          
  67          // MAX7219初始化，设置MAX7219内部的控制寄存器
  68          void Init7219(void)
  69          {
  70   1          Write7219(SHUT_DOWN, 0x01);    // 开启正常工作模式（0xX1）
  71   1          Write7219(DISPLAY_TEST, 0x00); // 选择工作模式（0xX0）
  72   1          Write7219(DECODE_MODE, 0xff);  // 选用全译码模式
  73   1          Write7219(SCAN_LIMIT, 0x07);   // 8只LED全用
  74   1          Write7219(INTENSITY, 0x04);    // 设置初始亮度
  75   1      }
  76          
  77          void DisplayDigit(uchar val, direction dir)
  78          {
  79   1          // @brief 在dir方向展示val,并将本次显示的值保存在last_变量中
  80   1          // @note  这是唯一允许调用数码管显示的方式
  81   1          static uchar ones, tens;
  82   1      
  83   1          if (val == DONT_DISPLAY)
  84   1          {
  85   2              // 两位均不显示
  86   2              ones = SEG_OFF;
  87   2              tens = SEG_OFF;
  88   2          }
  89   1          else
  90   1          {
  91   2              ones = val % 10;
  92   2              tens = (val / 10 % 10) == 0 ? SEG_OFF : (val / 10 % 10); // 如果十位为0，则不显示
  93   2          }
  94   1      
  95   1          Write7219(ONES_BIT[dir], ones);
  96   1          Write7219(TENS_BIT[dir], tens);
  97   1      
  98   1          if (val == DONT_DISPLAY)
  99   1              last_display_val[dir] = last_display_val[dir]; // 不保存空白位置
 100   1          else
 101   1              last_display_val[dir] = val;
 102   1      }
 103          
 104          uchar GetReloadValue(TrafficLightColor next_status, direction dir)
 105          {
 106   1          switch (next_status)
 107   1          {
 108   2          case RED:
 109   2              return red_time[dir];
 110   2          case YELLOW:
 111   2              return yellow_time[dir];
 112   2          case GREEN:
 113   2              return green_time[dir];
 114   2          default:
 115   2              break;
 116   2          }
C51 COMPILER V9.60.0.0   TRAFFIC_LIGHT                                                     12/14/2022 15:30:06 PAGE 3   

 117   1          return 0;
 118   1      }
 119          
 120          void DisplayDigitDemo()
 121          {
 122   1          Write7219(1, 1); // 15为全灭
 123   1          Write7219(2, 2);
 124   1          Write7219(3, 3);
 125   1          Write7219(4, 4);
 126   1          Write7219(5, 5);
 127   1          Write7219(6, 6);
 128   1          Write7219(7, 7);
 129   1          Write7219(8, 8);
 130   1          // Write7219(1, 15); // 15为全灭
 131   1      }
 132          
 133          void TrafficLight()
 134          {
 135   1          direction dir;
 136   1          if (new_second_flag)
 137   1          {
 138   2              for (dir = 0; dir < DIRECTION_MAX; dir++)
 139   2              {
 140   3                  remain_time[dir]--;       // 各方向倒计时更新
 141   3                  if (remain_time[dir] < 5) // 判断是否需要闪烁
 142   3                  {
 143   4                      if (current_color[dir] == YELLOW)
 144   4                          ToggleLedBit(GetDstLed(dir, YELLOW));
 145   4                  }
 146   3                  if (remain_time[dir] <= 0)
 147   3                  {
 148   4                      // 装载下一个状态
 149   4                      next_status = (current_color[dir] + 1 >= TRAFFIC_LIGHT_STATUS_MAX) ? (RED) : (current_colo
             -r[dir] + 1);
 150   4                      remain_time[dir] = GetReloadValue(next_status, dir);
 151   4                      SetLedColor(dir, next_status);
 152   4                  }
 153   3      
 154   3                  // 数码管显示剩余秒数
 155   3                  DisplayDigit(remain_time[dir], dir);
 156   3              }
 157   2              new_second_flag = 0; // 清除标志位
 158   2          }
 159   1          else
 160   1              return;
 161   1      }
 162          
 163          void Setting()
 164          {
 165   1          // EA = 0;
 166   1          direction dir = NORTH;
 167   1          uchar time_out_flag = 0;
 168   1          TrafficLightColor color = RED;
 169   1          for (dir = EAST; dir < DIRECTION_MAX; dir++)
 170   1              SetLedColor(dir, RED); // 全部置为红灯
 171   1          for (dir = EAST; dir < DIRECTION_MAX; dir++)
 172   1          {
 173   2              while (mode == SETTING)
 174   2              {
 175   3                  if (new_second_flag)
 176   3                  {
 177   4                      ToggleSegs(dir);
C51 COMPILER V9.60.0.0   TRAFFIC_LIGHT                                                     12/14/2022 15:30:06 PAGE 4   

 178   4                      new_second_flag = 0;
 179   4                  }
 180   3                  if (UP_KEY == 0)
 181   3                  {
 182   4                  }
 183   3              }
 184   2          }
 185   1          ClockReset();       // 重置时钟
 186   1          TrafficLightInit(); // 重新初始化
 187   1          mode = RUNNING;
 188   1          // EA = 1;
 189   1      }
 190          
 191          void ClockReset()
 192          {
 193   1          // @brief 重置定时器0以及毫秒、秒计数器
 194   1          TR0 = 0;    // 定时器0开始计时
 195   1          ET0 = 0;    // 关闭定时器0中断
 196   1          TL0 = 0x20; // 设置定时初始值
 197   1          TH0 = 0xD1; // 设置定时初始值
 198   1          milliseconds = 0;
 199   1          seconds = 0;
 200   1          ET0 = 1;
 201   1          TR0 = 1; // 定时器0开始计时
 202   1      }
 203          
 204          void ToggleSegs(direction dir)
 205          {
 206   1          // @note: 向方向写入DONT_DISPLAY可以使数码管熄灭
 207   1          static uchar ON[4] = {1, 1, 1, 1}; // 4个方向的开关状态
 208   1          if (ON[dir] == 1)
 209   1          {
 210   2              DisplayDigit(DONT_DISPLAY, dir);
 211   2              ON[dir] = 0;
 212   2          }
 213   1          else
 214   1          {
 215   2              DisplayDigit(last_display_val[dir], dir);
 216   2              ON[dir] = 1;
 217   2          }
 218   1      }
 219          
 220          void SetLedColor(direction dir, TrafficLightColor color)
 221          {
 222   1          /**
 223   1           * @brief 设置dir方向的灯色
 224   1           * @ref 参见TrafficLight枚举
 225   1           * @warning 在高频调用该函数时会使输出电平出现暂态，影响稳定性
 226   1           */
 227   1          SetLedBit(GetDstLed(dir, current_color[dir]), LED_OFF);
 228   1          SetLedBit(GetDstLed(dir, color), LED_ON);
 229   1          current_color[dir] = color;
 230   1      }
 231          
 232          uchar GetDstLed(direction dir, TrafficLightColor color)
 233          {
 234   1          /**
 235   1           * @brief 获取dir方向color颜色的LED对应的LEDs枚举变量
 236   1           */
 237   1          uchar dst_led = 0;
 238   1          switch (dir)
 239   1          {
C51 COMPILER V9.60.0.0   TRAFFIC_LIGHT                                                     12/14/2022 15:30:06 PAGE 5   

 240   2          case NORTH:
 241   2              dst_led = 0;
 242   2              break;
 243   2          case WEST:
 244   2              dst_led = 3;
 245   2              break;
 246   2          case SOUTH:
 247   2              dst_led = 6;
 248   2              break;
 249   2          case EAST:
 250   2              dst_led = 9;
 251   2              break;
 252   2          default:
 253   2              break;
 254   2          }
 255   1          switch (color)
 256   1          {
 257   2          case GREEN:
 258   2              break;
 259   2          case YELLOW:
 260   2              dst_led += 1;
 261   2              break;
 262   2          case RED:
 263   2              dst_led += 2;
 264   2              break;
 265   2          default:
 266   2              break;
 267   2          }
 268   1          return dst_led;
 269   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    748    ----
   CONSTANT SIZE    =      8    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     31       7
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
