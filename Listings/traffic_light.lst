C51 COMPILER V9.60.0.0   TRAFFIC_LIGHT                                                     12/14/2022 15:36:28 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE TRAFFIC_LIGHT
OBJECT MODULE PLACED IN .\Objects\traffic_light.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE traffic_light.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\List
                    -ings\traffic_light.lst) TABS(2) OBJECT(.\Objects\traffic_light.obj)

line level    source

   1          #include "headfile.h"
   2          
   3          #define DONT_DISPLAY 255 // DisplayDigit函数的val为该值时，两位均不显示
   4          #define SEG_OFF 15       // Write7219向某位数码管写入该值时，该位数码管不显示
   5          
   6          static uchar last_display_val[4];
   7          digs_addr code ONES_BIT[] = {EAST_ONES, SOUTH_ONES, WEST_ONES, NORTH_ONES};
   8          digs_addr code TENS_BIT[] = {EAST_TENS, SOUTH_TENS, WEST_TENS, NORTH_TENS};
   9          uchar remain_time[4];
  10          uchar light_time[4][3];
  11          uchar current_color[4];
  12          TrafficLightColor next_status;
  13          
  14          void TrafficLightInit()
  15          {
  16   1          /**
  17   1           * @brief 初始化交通灯的值
  18   1           * @todo 注意修改初始时间
  19   1           */
  20   1          uchar i;
  21   1          for (i = 0; i < TRAFFIC_LIGHT_MAX; i++)
  22   1          {
  23   2              SetLedBit(i, LED_OFF); // 关掉所有灯
  24   2          }
  25   1          // 初始状态
  26   1          light_time[EAST][RED] = 60, light_time[EAST][YELLOW] = 5, light_time[EAST][GREEN] = 15;
  27   1          light_time[SOUTH][RED] = 60, light_time[SOUTH][YELLOW] = 5, light_time[SOUTH][GREEN] = 15;
  28   1          light_time[WEST][RED] = 60, light_time[WEST][YELLOW] = 5, light_time[WEST][GREEN] = 15;
  29   1          light_time[NORTH][RED] = 60, light_time[NORTH][YELLOW] = 5, light_time[NORTH][GREEN] = 15;
  30   1      
  31   1          remain_time[EAST] = 15;
  32   1          remain_time[SOUTH] = 20;
  33   1          remain_time[WEST] = 40;
  34   1          remain_time[NORTH] = 60;
  35   1      
  36   1          SetLedColor(EAST, GREEN);
  37   1          SetLedColor(SOUTH, RED);
  38   1          SetLedColor(WEST, RED);
  39   1          SetLedColor(NORTH, RED);
  40   1      }
  41          
  42          void Write7219(unsigned char address, unsigned char dat)
  43          {
  44   1          unsigned char i;
  45   1          LOAD_7219 = 0; // 拉低片选线，选中器件
  46   1          // 发送地址
  47   1          for (i = 0; i < 8; i++) // 移位循环8次
  48   1          {
  49   2              CLK_7219 = 0;                     // 清零时钟总线
  50   2              DIN_7219 = (bit)(address & 0x80); // 每次取高字节
  51   2              address <<= 1;                    // 左移一位
  52   2              CLK_7219 = 1;                     // 时钟上升沿，发送地址
  53   2          }
  54   1          // 发送数据
C51 COMPILER V9.60.0.0   TRAFFIC_LIGHT                                                     12/14/2022 15:36:28 PAGE 2   

  55   1          for (i = 0; i < 8; i++)
  56   1          {
  57   2              CLK_7219 = 0;
  58   2              DIN_7219 = (bit)(dat & 0x80);
  59   2              dat <<= 1;
  60   2              CLK_7219 = 1; // 时钟上升沿，发送数据
  61   2          }
  62   1          LOAD_7219 = 1; // 发送结束，上升沿锁存数据
  63   1      }
  64          
  65          // MAX7219初始化，设置MAX7219内部的控制寄存器
  66          void Init7219(void)
  67          {
  68   1          Write7219(SHUT_DOWN, 0x01);    // 开启正常工作模式（0xX1）
  69   1          Write7219(DISPLAY_TEST, 0x00); // 选择工作模式（0xX0）
  70   1          Write7219(DECODE_MODE, 0xff);  // 选用全译码模式
  71   1          Write7219(SCAN_LIMIT, 0x07);   // 8只LED全用
  72   1          Write7219(INTENSITY, 0x04);    // 设置初始亮度
  73   1      }
  74          
  75          void DisplayDigit(uchar val, direction dir)
  76          {
  77   1          // @brief 在dir方向展示val,并将本次显示的值保存在last_变量中
  78   1          // @note  这是唯一允许调用数码管显示的方式
  79   1          static uchar ones, tens;
  80   1      
  81   1          if (val == DONT_DISPLAY)
  82   1          {
  83   2              // 两位均不显示
  84   2              ones = SEG_OFF;
  85   2              tens = SEG_OFF;
  86   2          }
  87   1          else
  88   1          {
  89   2              ones = val % 10;
  90   2              tens = (val / 10 % 10) == 0 ? SEG_OFF : (val / 10 % 10); // 如果十位为0，则不显示
  91   2          }
  92   1      
  93   1          Write7219(ONES_BIT[dir], ones);
  94   1          Write7219(TENS_BIT[dir], tens);
  95   1      
  96   1          if (val == DONT_DISPLAY)
  97   1              last_display_val[dir] = last_display_val[dir]; // 不保存空白位置
  98   1          else
  99   1              last_display_val[dir] = val;
 100   1      }
 101          
 102          void DisplayDigitDemo()
 103          {
 104   1          Write7219(1, 1); // 15为全灭
 105   1          Write7219(2, 2);
 106   1          Write7219(3, 3);
 107   1          Write7219(4, 4);
 108   1          Write7219(5, 5);
 109   1          Write7219(6, 6);
 110   1          Write7219(7, 7);
 111   1          Write7219(8, 8);
 112   1          // Write7219(1, 15); // 15为全灭
 113   1      }
 114          
 115          void TrafficLight()
 116          {
C51 COMPILER V9.60.0.0   TRAFFIC_LIGHT                                                     12/14/2022 15:36:28 PAGE 3   

 117   1          direction dir;
 118   1          if (new_second_flag)
 119   1          {
 120   2              for (dir = 0; dir < DIRECTION_MAX; dir++)
 121   2              {
 122   3                  remain_time[dir]--;       // 各方向倒计时更新
 123   3                  if (remain_time[dir] < 5) // 判断是否需要闪烁
 124   3                  {
 125   4                      if (current_color[dir] == YELLOW)
 126   4                          ToggleLedBit(GetDstLed(dir, YELLOW));
 127   4                  }
 128   3                  if (remain_time[dir] <= 0)
 129   3                  {
 130   4                      // 装载下一个状态
 131   4                      next_status = (current_color[dir] + 1 >= TRAFFIC_LIGHT_STATUS_MAX) ? (RED) : (current_colo
             -r[dir] + 1);
 132   4                      // remain_time[dir] = GetReloadValue(next_status, dir);
 133   4                      remain_time[dir] = light_time[dir][next_status];
 134   4                      SetLedColor(dir, next_status);
 135   4                  }
 136   3      
 137   3                  // 数码管显示剩余秒数
 138   3                  DisplayDigit(remain_time[dir], dir);
 139   3              }
 140   2              new_second_flag = 0; // 清除标志位
 141   2          }
 142   1          else
 143   1              return;
 144   1      }
 145          
 146          void Setting()
 147          {
 148   1          // EA = 0;
 149   1          direction dir = NORTH;
 150   1          uchar time_out_flag = 0;
 151   1          TrafficLightColor color = RED;
 152   1          for (dir = EAST; dir < DIRECTION_MAX; dir++)
 153   1              SetLedColor(dir, RED); // 全部置为红灯
 154   1          for (dir = EAST; dir < DIRECTION_MAX; dir++)
 155   1          {
 156   2              while (mode == SETTING)
 157   2              {
 158   3                  if (new_second_flag)
 159   3                  {
 160   4                      ToggleSegs(dir);
 161   4                      new_second_flag = 0;
 162   4                  }
 163   3                  if (UP_KEY == 0)
 164   3                  {
 165   4                  }
 166   3              }
 167   2          }
 168   1          ClockReset();       // 重置时钟
 169   1          TrafficLightInit(); // 重新初始化
 170   1          mode = RUNNING;
 171   1          // EA = 1;
 172   1      }
 173          
 174          void ClockReset()
 175          {
 176   1          // @brief 重置定时器0以及毫秒、秒计数器
 177   1          TR0 = 0;    // 定时器0开始计时
C51 COMPILER V9.60.0.0   TRAFFIC_LIGHT                                                     12/14/2022 15:36:28 PAGE 4   

 178   1          ET0 = 0;    // 关闭定时器0中断
 179   1          TL0 = 0x20; // 设置定时初始值
 180   1          TH0 = 0xD1; // 设置定时初始值
 181   1          milliseconds = 0;
 182   1          seconds = 0;
 183   1          ET0 = 1;
 184   1          TR0 = 1; // 定时器0开始计时
 185   1      }
 186          
 187          void ToggleSegs(direction dir)
 188          {
 189   1          // @note: 向方向写入DONT_DISPLAY可以使数码管熄灭
 190   1          static uchar ON[4] = {1, 1, 1, 1}; // 4个方向的开关状态
 191   1          if (ON[dir] == 1)
 192   1          {
 193   2              DisplayDigit(DONT_DISPLAY, dir);
 194   2              ON[dir] = 0;
 195   2          }
 196   1          else
 197   1          {
 198   2              DisplayDigit(last_display_val[dir], dir);
 199   2              ON[dir] = 1;
 200   2          }
 201   1      }
 202          
 203          void SetLedColor(direction dir, TrafficLightColor color)
 204          {
 205   1          /**
 206   1           * @brief 设置dir方向的灯色
 207   1           * @ref 参见TrafficLight枚举
 208   1           * @warning 在高频调用该函数时会使输出电平出现暂态，影响稳定性
 209   1           */
 210   1          SetLedBit(GetDstLed(dir, current_color[dir]), LED_OFF);
 211   1          SetLedBit(GetDstLed(dir, color), LED_ON);
 212   1          current_color[dir] = color;
 213   1      }
 214          
 215          uchar GetDstLed(direction dir, TrafficLightColor color)
 216          {
 217   1          /**
 218   1           * @brief 获取dir方向color颜色的LED对应的LEDs枚举变量
 219   1           */
 220   1          uchar dst_led = 0;
 221   1          switch (dir)
 222   1          {
 223   2          case NORTH:
 224   2              dst_led = 0;
 225   2              break;
 226   2          case WEST:
 227   2              dst_led = 3;
 228   2              break;
 229   2          case SOUTH:
 230   2              dst_led = 6;
 231   2              break;
 232   2          case EAST:
 233   2              dst_led = 9;
 234   2              break;
 235   2          default:
 236   2              break;
 237   2          }
 238   1          switch (color)
 239   1          {
C51 COMPILER V9.60.0.0   TRAFFIC_LIGHT                                                     12/14/2022 15:36:28 PAGE 5   

 240   2          case GREEN:
 241   2              break;
 242   2          case YELLOW:
 243   2              dst_led += 1;
 244   2              break;
 245   2          case RED:
 246   2              dst_led += 2;
 247   2              break;
 248   2          default:
 249   2              break;
 250   2          }
 251   1          return dst_led;
 252   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    726    ----
   CONSTANT SIZE    =      8    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     31       7
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
